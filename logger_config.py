import logging

class LogFilter(logging.Filter):
    """Filter to exclude unwanted log entries like hs_err and replay_pid logs."""
    def filter(self, record):
        unwanted_patterns = ['hs_err_pid', 'replay_pid']
        return not any(pattern in record.getMessage() for pattern in unwanted_patterns)

def configure_logger():
    """Configure the application logger with custom formatting and filters."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    logger = logging.getLogger(__name__)
    logger.addFilter(LogFilter())
    return logger

# src/decompiler.py
import asyncio
import logging
import os
import requests
from tqdm import tqdm

logger = logging.getLogger(__name__)

class DecompileProgress:
    """Track progress of decompilation process with tqdm integration."""
    def __init__(self, total):
        self.progress = tqdm(total=total, desc="Decompiling", unit="files")
        self.failed_files = []

    def update(self, file_path, success):
        self.progress.update(1)
        if not success and 'javassist' not in file_path:
            self.failed_files.append(file_path)

    def close(self):
        self.progress.close()

async def decompile_class_file(class_file, output_dir, progress_tracker):
    """Decompile a single class file using CFR decompiler."""
    try:
        process = await asyncio.create_subprocess_exec(
            "java", "-jar", "cfr-0.152.jar",
            class_file,
            "--outputdir", output_dir,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        await process.communicate()
        success = process.returncode == 0
        progress_tracker.update(class_file, success)
        return class_file, success
    except Exception as e:
        progress_tracker.update(class_file, False)
        return class_file, False

def download_cfr():
    """Download the CFR decompiler if not present."""
    cfr_path = "cfr-0.152.jar"
    if not os.path.exists(cfr_path):
        logger.info("CFR decompiler not found. Downloading...")
        cfr_url = "https://www.benf.org/other/cfr/cfr-0.152.jar"
        try:
            response = requests.get(cfr_url, stream=True)
            response.raise_for_status()
            with open(cfr_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            logger.info("Successfully downloaded CFR decompiler")
            return True
        except Exception as e:
            logger.error(f"Failed to download CFR: {e}")
            return False
    return True