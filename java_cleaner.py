import os
import logging
from typing import Optional, Tuple

logger = logging.getLogger(__name__)


def clean_java_file(file_path: str, class_name: str, removed_dirs: set) -> None:
    """Clean malicious code patterns from Java source files."""
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    final_lines = []
    i = 0
    while i < len(lines):
        current_line = lines[i].rstrip()
        skip_line = False

        # Handle imports
        if current_line.strip().startswith('import'):
            parts = current_line.split('import')[1].strip().split('.')
            if any(len(part.strip()) == 1 for part in parts[:-1]) or \
                    any(f"import {dir_name}." in current_line for dir_name in removed_dirs):
                skip_line = True

        # Handle plugin class specific cleaning
        if class_name and os.path.basename(file_path)[:-5] == class_name:
            if ('public void onEnable()' in current_line or
                    f'public {class_name}' in current_line and '(' in current_line):
                i = process_method_block(lines, i, final_lines, class_name)
                continue

        if not skip_line:
            final_lines.append(lines[i])
        i += 1

    with open(file_path, 'w', encoding='utf-8') as f:
        f.writelines(final_lines)


def process_method_block(lines: list, start_idx: int, final_lines: list, class_name: str) -> int:
    """Process a method block, handling constructor and onEnable method specially."""
    i = start_idx
    final_lines.append(lines[i])  # Add method declaration

    # Handle opening brace
    if '{' not in lines[i]:
        while i < len(lines) and '{' not in lines[i]:
            i += 1
            final_lines.append(lines[i])
    i += 1

    # Process method body
    found_new = False
    while i < len(lines) and '}' not in lines[i]:
        line = lines[i].strip()
        if ('new' in line and not found_new and
                'public void onEnable()' in lines[start_idx]):
            found_new = True
            i += 1
            continue
        if line:
            final_lines.append(lines[i])
        i += 1

    final_lines.append(lines[i])  # Add closing brace
    return i + 1


def analyze_java_file(file_path: str) -> Optional[Tuple[str, str]]:
    """Analyze Java file for JavaPlugin class and onEnable method."""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        if 'extends JavaPlugin' not in content or 'onEnable' not in content:
            return None

        class_name = os.path.basename(file_path)[:-5]
        return file_path, class_name

    except Exception as e:
        logger.error(f"Error analyzing {file_path}: {e}")
        return None